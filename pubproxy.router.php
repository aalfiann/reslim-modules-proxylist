<?php
//Define interface class for router
use \Psr\Http\Message\ServerRequestInterface as Request;        //PSR7 ServerRequestInterface   >> Each router file must contains this
use \Psr\Http\Message\ResponseInterface as Response;            //PSR7 ResponseInterface        >> Each router file must contains this

//Define your modules class
use \modules\proxylist\PubProxyService as PubProxyService;      //Your main modules class

//Define additional class for any purpose
use \classes\middleware\ValidateParam as ValidateParam;         //ValidateParam                 >> To validate the body form request
use \classes\middleware\ApiKey as ApiKey;                       //ApiKey Middleware             >> To authorize request by using ApiKey generated by reSlim


    // Post to get proxy list 
    $app->post('/proxylist/pubproxy/list', function (Request $request, Response $response) {
        $pp = new PubProxyService($this->db);
        $pp->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();

        $pp->username = $datapost['Username'];
        $pp->token = $datapost['Token'];

        $pp->api = (empty($datapost['Api'])?'':$datapost['Api']);
        $pp->limit = (empty($datapost['Limit'])?20:$datapost['Limit']);
        $pp->level = (empty($datapost['Level'])?'':$datapost['Level']);
        $pp->type = (empty($datapost['Type'])?'':$datapost['Type']);
        $pp->country = (empty($datapost['Country'])?'':$datapost['Country']);
        $pp->not_country = (empty($datapost['Not_country'])?'':$datapost['Not_country']);
        $pp->last_check = (empty($datapost['Last_check'])?0:$datapost['Last_check']);
        $pp->speed = (empty($datapost['Speed'])?0:$datapost['Speed']);
        $pp->port = (empty($datapost['Port'])?'':$datapost['Port']);
        $pp->google = (empty($datapost['Google'])?'':$datapost['Google']);
        $pp->https = (empty($datapost['Https'])?'':$datapost['Https']);
        $pp->post = (empty($datapost['Post'])?'':$datapost['Post']);
        $pp->cookies = (empty($datapost['Cookies'])?'':$datapost['Cookies']);
        $pp->referer = (empty($datapost['Referer'])?'':$datapost['Referer']);
        $pp->user_agent = (empty($datapost['User_agent'])?'':$datapost['User_agent']);
        $pp->refresh = (empty($datapost['Refresh'])?1800:$datapost['Refresh']);

        $body = $response->getBody();
        $body->write($pp->showList());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam('Username','1-50','required'));

    // Post to get proxy list for public
    $app->map(['POST','OPTIONS'],'/proxylist/pubproxy/list/public/', function (Request $request, Response $response) {
        $pp = new PubProxyService();
        $pp->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();

        $pp->api = (empty($datapost['Api'])?'':$datapost['Api']);
        $pp->limit = (empty($datapost['Limit'])?20:$datapost['Limit']);
        $pp->level = (empty($datapost['Level'])?'':$datapost['Level']);
        $pp->type = (empty($datapost['Type'])?'':$datapost['Type']);
        $pp->country = (empty($datapost['Country'])?'':$datapost['Country']);
        $pp->not_country = (empty($datapost['Not_country'])?'':$datapost['Not_country']);
        $pp->last_check = (empty($datapost['Last_check'])?0:$datapost['Last_check']);
        $pp->speed = (empty($datapost['Speed'])?0:$datapost['Speed']);
        $pp->port = (empty($datapost['Port'])?'':$datapost['Port']);
        $pp->google = (empty($datapost['Google'])?'':$datapost['Google']);
        $pp->https = (empty($datapost['Https'])?'':$datapost['Https']);
        $pp->post = (empty($datapost['Post'])?'':$datapost['Post']);
        $pp->cookies = (empty($datapost['Cookies'])?'':$datapost['Cookies']);
        $pp->referer = (empty($datapost['Referer'])?'':$datapost['Referer']);
        $pp->user_agent = (empty($datapost['User_agent'])?'':$datapost['User_agent']);
        $pp->refresh = (empty($datapost['Refresh'])?1800:$datapost['Refresh']);
        
        $body = $response->getBody();
        $body->write($pp->showListPublic());
        return classes\Cors::modify($response,$body,200,$request);
    })->add(new ApiKey);

    // Post to get rotate proxy 
    $app->post('/proxylist/pubproxy/rotate', function (Request $request, Response $response) {
        $pp = new PubProxyService($this->db);
        $pp->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();

        $pp->username = $datapost['Username'];
        $pp->token = $datapost['Token'];

        $pp->api = (empty($datapost['Api'])?'':$datapost['Api']);
        $pp->limit = (empty($datapost['Limit'])?20:$datapost['Limit']);
        $pp->level = (empty($datapost['Level'])?'':$datapost['Level']);
        $pp->type = (empty($datapost['Type'])?'':$datapost['Type']);
        $pp->country = (empty($datapost['Country'])?'':$datapost['Country']);
        $pp->not_country = (empty($datapost['Not_country'])?'':$datapost['Not_country']);
        $pp->last_check = (empty($datapost['Last_check'])?0:$datapost['Last_check']);
        $pp->speed = (empty($datapost['Speed'])?0:$datapost['Speed']);
        $pp->port = (empty($datapost['Port'])?'':$datapost['Port']);
        $pp->google = (empty($datapost['Google'])?'':$datapost['Google']);
        $pp->https = (empty($datapost['Https'])?'':$datapost['Https']);
        $pp->post = (empty($datapost['Post'])?'':$datapost['Post']);
        $pp->cookies = (empty($datapost['Cookies'])?'':$datapost['Cookies']);
        $pp->referer = (empty($datapost['Referer'])?'':$datapost['Referer']);
        $pp->user_agent = (empty($datapost['User_agent'])?'':$datapost['User_agent']);
        $pp->refresh = (empty($datapost['Refresh'])?1800:$datapost['Refresh']);

        $body = $response->getBody();
        $body->write($pp->rotateProxy());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam('Username','1-50','required'));

    // Post to get rotate proxy for public
    $app->map(['POST','OPTIONS'],'/proxylist/pubproxy/rotate/public/', function (Request $request, Response $response) {
        $pp = new PubProxyService();
        $pp->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();

        $pp->api = (empty($datapost['Api'])?'':$datapost['Api']);
        $pp->limit = (empty($datapost['Limit'])?20:$datapost['Limit']);
        $pp->level = (empty($datapost['Level'])?'':$datapost['Level']);
        $pp->type = (empty($datapost['Type'])?'':$datapost['Type']);
        $pp->country = (empty($datapost['Country'])?'':$datapost['Country']);
        $pp->not_country = (empty($datapost['Not_country'])?'':$datapost['Not_country']);
        $pp->last_check = (empty($datapost['Last_check'])?0:$datapost['Last_check']);
        $pp->speed = (empty($datapost['Speed'])?0:$datapost['Speed']);
        $pp->port = (empty($datapost['Port'])?'':$datapost['Port']);
        $pp->google = (empty($datapost['Google'])?'':$datapost['Google']);
        $pp->https = (empty($datapost['Https'])?'':$datapost['Https']);
        $pp->post = (empty($datapost['Post'])?'':$datapost['Post']);
        $pp->cookies = (empty($datapost['Cookies'])?'':$datapost['Cookies']);
        $pp->referer = (empty($datapost['Referer'])?'':$datapost['Referer']);
        $pp->user_agent = (empty($datapost['User_agent'])?'':$datapost['User_agent']);
        $pp->refresh = (empty($datapost['Refresh'])?1800:$datapost['Refresh']);
        
        $body = $response->getBody();
        $body->write($pp->rotateProxyPublic());
        return classes\Cors::modify($response,$body,200,$request);
    })->add(new ApiKey);